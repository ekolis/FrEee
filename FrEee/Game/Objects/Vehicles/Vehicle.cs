
using FrEee.Game.Enumerations;
using FrEee.Game.Interfaces;
using FrEee.Game.Objects.Abilities;
using FrEee.Game.Objects.Civilization;
using FrEee.Game.Objects.Combat;
using FrEee.Game.Objects.Space;
using FrEee.Game.Objects.Technology;
using FrEee.Modding;
using FrEee.Modding.Interfaces;
using FrEee.Utility;
using FrEee.Utility.Extensions;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.IO;
using System.Reflection;

namespace FrEee.Game.Objects.Vehicles
{
	/// <summary>
	/// A ship, base, or unit.
	/// </summary>
	[Serializable]
	public abstract class Vehicle : INamed, IConstructable, IVehicle, ICombatant, IFoggable
	{
		public Vehicle()
		{
			Components = new List<Component>();
			ConstructionProgress = new ResourceQuantity();
		}

		/// <summary>
		/// The name of this vehicle.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The design of this vehicle.
		/// </summary>
		public IDesign Design { get; set; }

		/// <summary>
		/// The components on this vehicle.
		/// Needs to be protected, not private, so reflection can find it from a derived class.
		/// Can change CommonExtensions.CopyEnumerableProperties to scan base classes, though...
		/// </summary>
		public IList<Component> Components { get; protected set; }

		public bool RequiresColonyQueue
		{
			get { return false; }
		}

		public abstract bool RequiresSpaceYardQueue { get; }

		public ResourceQuantity Cost
		{
			get
			{
				if (!Components.Any())
					return new ResourceQuantity();
				return Design.Hull.Cost + Components.Select(c => c.Template.Cost).Aggregate((c1, c2) => c1 + c2);
			}
		}

		public ResourceQuantity ConstructionProgress
		{
			get;
			set;
		}

		[DoNotSerialize]
		public Image Icon
		{
			get { return Design.Icon; }
		}

		[DoNotSerialize]
		public Image Portrait
		{
			get { return Design.Portrait; }
		}

		/*public IEnumerable<string> IconPaths
		{
			get { return Design.IconPaths; }
		}

		public IEnumerable<string> PortraitPaths
		{
			get { return Design.PortraitPaths; }
		}*/

		public abstract void Place(ISpaceObject target);

		/// <summary>
		/// The owner of this vehicle.
		/// </summary>
		public Empire Owner { get; set; }

		public IEnumerable<Ability> IntrinsicAbilities
		{
			get { yield break; }
		}

		/// <summary>
		/// The speed of the vehicle, taking into account hull mass, thrust, and speed bonuses.
		/// </summary>
		public virtual int Speed
		{
			get
			{
				// no Engines Per Move rating? then no movement
				if (Design.Hull.Mass == 0)
					return 0;

				// can't go anywhere without thrust!
				var thrust = this.GetAbilityValue("Standard Ship Movement").ToInt();
				if (thrust < Design.Hull.Mass)
					return 0;

				// take into account base speed plus all bonuses
				return
					thrust / Design.Hull.Mass
					+ this.GetAbilityValue("Movement Bonus").ToInt()
					+ this.GetAbilityValue("Extra Movement Generation").ToInt()
					+ this.GetAbilityValue("Vehicle Speed").ToInt()
					+ EmergencySpeed;
			}
		}

		/// <summary>
		/// Emergency speed generated by activated emergency propulsion components. Only available for one turn.
		/// </summary>
		[DoNotSerialize]
		public int EmergencySpeed { get; set; }

		public override string ToString()
		{
			return Name;
		}

		public long ID
		{
			get;
			set;
		}

		public bool IsHostileTo(Empire emp)
		{
			return Owner == null ? false : Owner.IsEnemyOf(emp, StarSystem);
		}

		/// <summary>
		/// The undamaged weapons installed on this vehicle.
		/// </summary>
		public IEnumerable<Component> Weapons
		{
			get
			{
				return Components.Where(c => !c.IsDestroyed && c.Template.ComponentTemplate.WeaponInfo != null);
			}
		}

		public int TakeDamage(Hit hit, PRNG dice = null)
		{
			int damage = hit.NominalDamage;

			if (IsDestroyed)
				return damage; // she canna take any more!

			// TODO - make sure we have components that are not immune to the damage type so we don't get stuck in an infinite loop
			int shieldDmg = 0;
			int normalShieldPiercing = hit.Shot.DamageType.NormalShieldPiercing.Evaluate(hit);
			int phasedShieldPiercing = hit.Shot.DamageType.PhasedShieldPiercing.Evaluate(hit);

			// weighted average of shield piercing by shield type
			int shieldPiercing = NormalShields + PhasedShields > 0 ? (normalShieldPiercing * NormalShields + phasedShieldPiercing * PhasedShields) / (NormalShields + PhasedShields) : 0;
			double spf = shieldPiercing.Percent(); // shield piercing factor (leakiness)
			var sdf = 1d - spf; // shield damage factor (solidness)
			double normalBaseSDF = hit.Shot.DamageType.NormalShieldDamage.Evaluate(hit).Percent();
			double phasedBaseSDF = hit.Shot.DamageType.PhasedShieldDamage.Evaluate(hit).Percent();
			double normalCombinedSDF = sdf * normalBaseSDF; // accounting for both damage factor and piercing
			double phasedCombinedSDF = sdf * phasedBaseSDF;

			// how much damage pierced the shields?
			double piercedShields = 0;

			if (NormalShields > 0)
			{
				var dmg = (int)Math.Min(damage * normalCombinedSDF, NormalShields);
				piercedShields += damage * normalShieldPiercing.Percent();
				NormalShields -= dmg;
				damage -= (int)Math.Ceiling(dmg / normalBaseSDF);
				shieldDmg += dmg;
			}
			if (PhasedShields > 0)
			{
				var dmg = (int)Math.Min(damage * phasedCombinedSDF, PhasedShields);
				piercedShields += damage * phasedShieldPiercing.Percent();
				NormalShields -= dmg;
				damage -= (int)Math.Ceiling(dmg / phasedBaseSDF);
				shieldDmg += dmg;
			}

			// emissive armor negates a certain amount of damage that penetrates the shields
			// TODO - emissive should be ineffective vs. armor piercing damage
			var emissive = this.GetAbilityValue("Emissive Armor").ToInt();
			damage -= (int)Math.Round(emissive * hit.Shot.DamageType.EmissiveArmor.Evaluate(hit).Percent());

			while (damage > 0 && !IsDestroyed)
			{
				// save off damage counter for shield generation from damage ability
				var sgfdStart = damage;
				var sgfdAbility = this.GetAbilityValue("Shield Generation From Damage").ToInt();

				var comps = Components.Where(c => c.Hitpoints > 0);
				var armor = comps.Where(c => c.HasAbility("Armor"));
				var internals = comps.Where(c => !c.HasAbility("Armor"));
				var canBeHit = armor.Any() ? armor : internals;
				var comp = canBeHit.Where(c =>
					{
						// skip components that are completely pierced by this hit
						var hit2 = new Hit(hit.Shot, c, damage);
						return hit2.Shot.DamageType.ComponentPiercing.Evaluate(hit2) < 100;
					}).ToDictionary(c => c, c => c.HitChance).PickWeighted(dice);
				if (comp == null)
					break; // no more components to hit
				var comphit = new Hit(hit.Shot, comp, damage);
				damage = comp.TakeDamage(comphit, dice);

				// shield generation from damage
				var sgfd = hit.Shot.DamageType.ShieldGenerationFromDamage.Evaluate(hit).PercentOfRounded(Math.Min(sgfdStart - damage, sgfdAbility));
				ReplenishShields(sgfd);
			}


			if (IsDestroyed)
				Dispose();

			// update memory sight
			if (!IsMemory)
				this.UpdateEmpireMemories();

			return damage;
		}

		/// <summary>
		/// Is this vehicle destroyed?
		/// Vehicles are destroyed when all components are destroyed.
		/// </summary>
		public bool IsDestroyed { get { return Components.All(c => c.IsDestroyed); } }

		/// <summary>
		/// The current amount of shields.
		/// </summary>
		public int NormalShields { get; set; }

		/// <summary>
		/// The current amount of phased shields.
		/// </summary>
		public int PhasedShields { get; set; }

		/// <summary>
		/// Total current shield HP.
		/// </summary>
		public int ShieldHitpoints { get { return NormalShields + PhasedShields; } }

		/// <summary>
		/// Current HP of all armor components.
		/// </summary>
		public int ArmorHitpoints
		{
			get
			{
				return Components.Sum(c => c.ArmorHitpoints);
			}
		}

		public Progress ArmorHitpointsFill
		{
			get { return new Progress(ArmorHitpoints, MaxArmorHitpoints); }
		}

		/// <summary>
		/// Current HP of all non-armor components.
		/// </summary>
		public int HullHitpoints
		{
			get
			{
				return Components.Sum(c => c.HullHitpoints);
			}
		}

		public Progress HullHitpointsFill
		{
			get { return new Progress(HullHitpoints, MaxHullHitpoints); }
		}

		public Progress ShieldHitpointsFill
		{
			get { return new Progress(ShieldHitpoints, MaxShieldHitpoints); }
		}

		public int MaxNormalShields
		{
			get
			{
				var shields = MaxUnmodifiedNormalShields;
				var modifiers = ShieldModifiers;
				if (modifiers >= 0)
					return shields; // positive modifiers go to phased shields
				else
					return Math.Max(0, shields + modifiers); // negative modifiers go to normal shields first
			}
		}

		public int MaxUnmodifiedNormalShields
		{
			get
			{
				return
					this.GetAbilityValue("Shield Generation").ToInt()
					+ this.GetAbilityValue("Planet - Shield Generation").ToInt();
			}
		}

		public int ShieldModifiers
		{
			get
			{
				return
						-Sector.GetAbilityValue("Sector - Shield Disruption").ToInt()
						+ Sector.GetEmpireAbilityValue(Owner, "Shield Modifier - Sector").ToInt()
						+ StarSystem.GetEmpireAbilityValue(Owner, "Shield Modifier - System").ToInt()
						+ Owner.GetAbilityValue("Shield Modifier - Empire").ToInt();
			}
		}

		public int MaxUnmodifiedPhasedShields
		{
			get
			{
				return this.GetAbilityValue("Phased Shield Generation").ToInt();
			}
		}

		public int MaxPhasedShields
		{
			get
			{
				var shields = MaxUnmodifiedPhasedShields;
				var modifiers = ShieldModifiers;
				if (modifiers >= 0)
					return shields + modifiers; // positive modifiers go to phased shields
				else
					return Math.Max(0, shields + modifiers + MaxUnmodifiedNormalShields); // negative modifiers go to normal shields first
			}
		}

		public virtual void ReplenishShields(int? amount = null)
		{
			if (amount == null)
			{
				NormalShields = MaxNormalShields;
				PhasedShields = MaxPhasedShields;
			}
			else
			{
				PhasedShields += amount.Value;
				if (PhasedShields > MaxPhasedShields)
				{
					var overflow = PhasedShields - MaxPhasedShields;
					PhasedShields = MaxPhasedShields;
					NormalShields += overflow;
					if (NormalShields > MaxNormalShields)
						NormalShields = MaxNormalShields;
				}
			}
		}

		public virtual void Dispose()
		{
			if (IsDisposed)
				return;
			Galaxy.Current.UnassignID(this);
			if (!IsMemory)
				this.UpdateEmpireMemories();
		}

		[DoNotSerialize(false)]
		public int Hitpoints
		{
			get
			{
				return Components.Sum(c => c.Hitpoints);
			}
			set
			{
				throw new NotSupportedException("Cannot directly set the hitpoints of a vehicle. Its hitpoints are determined by its components.");
			}
		}

		public int MaxHitpoints
		{
			get { return Components.Sum(c => c.MaxHitpoints); }
		}

		/// <summary>
		/// Repairs a specified number of components.
		/// </summary>
		/// <param name="amount"></param>
		/// <returns></returns>
		public int? Repair(int? amount = null)
		{
			if (amount == null)
			{
				foreach (var comp in Components)
					comp.Repair();
			}
			else
			{
				// repair most-damaged components first
				// TODO - other repair priorities
				foreach (var comp in Components.OrderBy(c => (double)c.Hitpoints / (double)c.MaxHitpoints))
				{
					if (amount <= 0)
						break;
					comp.Repair();
					amount--;
				}
			}
			return amount;
		}


		public int HitChance
		{
			get { return 1; }
		}

		public abstract Visibility CheckVisibility(Empire emp);

		public bool CanTarget(ITargetable target)
		{
			// TODO - alliances
			return target.Owner != Owner && Components.Any(c => !c.IsDestroyed && c.Template.ComponentTemplate.WeaponInfo != null && c.Template.ComponentTemplate.WeaponInfo.Targets.HasFlag(target.WeaponTargetType));
		}

		public abstract WeaponTargets WeaponTargetType { get; }

		public int Accuracy
		{
			get
			{
				return
					this.GetAbilityValue("Combat To Hit Offense Plus").ToInt()
					- this.GetAbilityValue("Combat To Hit Offense Minus").ToInt()
					+ (Owner == null || Owner.Culture == null ? 0 : Owner.Culture.SpaceCombat)
					+ Sector.GetEmpireAbilityValue(Owner, "Combat Modifier - Sector").ToInt()
					+ StarSystem.GetEmpireAbilityValue(Owner, "Combat Modifier - System").ToInt()
					+ Owner.GetAbilityValue("Combat Modifier - Empire").ToInt();
			}
		}

		public int Evasion
		{
			get
			{
				return
					this.GetAbilityValue("Combat To Hit Defense Plus").ToInt()
					- this.GetAbilityValue("Combat To Hit Defense Minus").ToInt()
					+ (Owner == null || Owner.Culture == null ? 0 : Owner.Culture.SpaceCombat)
					+ Sector.GetEmpireAbilityValue(Owner, "Combat Modifier - Sector").ToInt()
					+ StarSystem.GetEmpireAbilityValue(Owner, "Combat Modifier - System").ToInt()
					+ Owner.GetAbilityValue("Combat Modifier - Empire").ToInt();
			}
		}

		/// <summary>
		/// Does this vehicle participate in ground combat?
		/// </summary>
		public abstract bool ParticipatesInGroundCombat
		{
			get;
		}

		public virtual void Redact(Empire emp)
		{
			var visibility = CheckVisibility(emp);

			// Can't see the ship's components if it's not scanned
			// and can't see the design either if we haven't scanned it before
			if (visibility < Visibility.Scanned)
			{
				// TODO - hide design of vehicle that has never been scanned before, even if we know the design?
				if (Design.CheckVisibility(emp) < Visibility.Scanned)
				{
					// create fake design
					var d = Vehicles.Design.Create(Design.VehicleType);
					d.Hull = Design.Hull;
					d.Owner = Design.Owner;
					Design = d;

					// set name of ship so we can't guess what design it is
					Name = (Owner?.Name ?? "Unowned") + " " + Hull.Name;
				}

				// clear component list
				Components.Clear();
			}

			if (visibility < Visibility.Fogged || visibility < Visibility.Visible && !IsMemory)
				Dispose();
		}

		public bool IsMemory
		{
			get;
			set;
		}

		public double Timestamp { get; set; }

		public abstract bool IsObsoleteMemory(Empire emp);

		public abstract AbilityTargets AbilityTarget { get; }

		public abstract Sector Sector { get; set; }

		public abstract StarSystem StarSystem { get; }

		/// <summary>
		/// Resource cost per turn to maintain this vehicle.
		/// </summary>

		public ResourceQuantity MaintenanceCost
		{
			get
			{
				double pct;
				if (Design.Hull.VehicleType == VehicleTypes.Ship || Design.Hull.VehicleType == VehicleTypes.Base)
					pct = Mod.Current.Settings.ShipBaseMaintenanceRate;
				else
					pct = Mod.Current.Settings.UnitMaintenanceRate;

				if (pct > 0)
				{
					pct += this.GetAbilityValue("Modified Maintenance Cost").ToInt();
					if (Sector != null)
						pct -= this.Sector.GetEmpireAbilityValue(Owner, "Reduced Maintenance Cost - Sector").ToInt();
					if (StarSystem != null)
						pct -= this.StarSystem.GetEmpireAbilityValue(Owner, "Reduced Maintenance Cost - System").ToInt();
					if (Owner != null)
					{
						pct -= this.Owner.GetAbilityValue("Reduced Maintenance Cost - Empire").ToInt();
						pct -= Owner.Culture.MaintenanceReduction;
						if (Owner.PrimaryRace.Aptitudes.ContainsKey(Aptitude.Maintenance.Name))
							pct -= Owner.PrimaryRace.Aptitudes[Aptitude.Maintenance.Name] - 100;
					}
					return Cost * pct / 100d;
				}
				else
					return new ResourceQuantity();
			}
		}

		public int MineralsMaintenance
		{
			get { return MaintenanceCost[Resource.Minerals]; }
		}

		public int OrganicsMaintenance
		{
			get { return MaintenanceCost[Resource.Organics]; }
		}

		public int RadioactivesMaintenance
		{
			get { return MaintenanceCost[Resource.Radioactives]; }
		}

		public int MaxShieldHitpoints
		{
			get { return MaxNormalShields + MaxPhasedShields; }
		}

		public int MaxArmorHitpoints
		{
			get { return Components.Sum(c => c.MaxArmorHitpoints); }
		}

		public int MaxHullHitpoints
		{
			get { return Components.Sum(c => c.MaxHullHitpoints); }
		}


		public IEnumerable<IAbilityObject> Children
		{
			get
			{
				if (Design == null)
					return Components;
				return Components.Cast<IAbilityObject>().Append(Design.Hull);
			}
		}

		public virtual IEnumerable<IAbilityObject> Parents
		{
			get { yield return Owner; }
		}

		public IConstructionTemplate Template
		{
			get { return Design; }
		}

		public bool IsDisposed { get; set; }

		public IHull Hull { get { return Design.Hull; } }

		public bool IsOurs { get { return Owner == Empire.Current; } }

		public int? Size
		{
			get { return Design.Hull.Size; }
		}

		public void Recycle(IRecycleBehavior behavior, bool didExecute = false)
		{
			// TODO - need to do more stuff to recycle?
			if (!didExecute)
				behavior.Execute(this, true);
		}

		public abstract IMobileSpaceObject RecycleContainer { get; }

		public ResourceQuantity ScrapValue
		{
			get
			{
				double ratio;
				if (this is Ship || this is Base)
					ratio = Mod.Current.Settings.ScrapShipOrBaseReturnRate;
				else
					ratio = Mod.Current.Settings.ScrapUnitReturnRate;
				var val = Cost * ratio / 100;
				if (this is ICargoContainer)
				{
					var cc = (ICargoContainer)this;
					if (cc.Cargo != null)
						val += cc.Cargo.Units.Sum(u => u.ScrapValue);
				}
				return val;
			}
		}

		public ResourceQuantity StandardIncomePercentages
		{
			get
			{
				return Owner.PrimaryRace.IncomePercentages;
			}
		}

		public ResourceQuantity RemoteMiningIncomePercentages
		{
			get
			{
				return Owner.PrimaryRace.IncomePercentages;
			}
		}

		/// <summary>
		/// Vehicles have no resource value.
		/// </summary>
		public ResourceQuantity ResourceValue
		{
			get { return new ResourceQuantity(); }
		}

		public bool IsObsolete
		{
			get { return Design.IsObsolete; }
		}

		/// <summary>
		/// Creates an upgraded version of this vehicle if it can be upgraded.
		/// </summary>
		public IVehicle LatestVersion
		{
			get
			{
				if (IsObsolescent)
					return Design.LatestVersion.Instantiate();
				else
					return this;
			}
		}

		public bool IsObsolescent
		{
			get { return Design.IsObsolescent; }
		}

		/// <summary>
		/// Any vehicles that use a newer version of this vehicle's design.
		/// </summary>
		public IEnumerable<IVehicle> NewerVersions
		{
			get
			{
				return Galaxy.Current.FindSpaceObjects<IVehicle>().Where(v => Design.UpgradesTo(v.Design));
			}
		}

		/// <summary>
		/// Any vehicles that use an older version of this vehicle's design.
		/// </summary>
		public IEnumerable<IVehicle> OlderVersions
		{
			get
			{
				return Galaxy.Current.FindSpaceObjects<IVehicle>().Where(v => v.Design.UpgradesTo(Design));
			}
		}

		public IEnumerable<string> PortraitPaths
		{
			get
			{
				return Design.PortraitPaths;
			}
		}

		public IEnumerable<string> IconPaths
		{
			get
			{
				return Design.IconPaths;
			}
		}

		public double MerchantsRatio => Owner.HasAbility("No Spaceports") ? 1.0 : 0.0;
	}
}
