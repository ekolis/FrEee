=======================================================================================
EVENT TYPES DATA FILE
=======================================================================================

=======================================================================================
*BEGIN*
=======================================================================================

Name 				:= Ship - Damage
Is Negative	When	:= amount > 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Vehicles import SpaceVehicle;
Import				:= from FrEee.Game.Interfaces import IUnit;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[SpaceVehicle]().Except[IVehicle](Galaxy.Current.FindSpaceObjects[IUnit]())
Parameter			:= VehicleName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.TakeDamage("Skips All Shields", amount);

Name 				:= Ship - Lose Movement
Is Negative	When	:= amount > 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Vehicles import Ship;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Ship]()
Parameter			:= VehicleName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.MovementRemaining -= amount;

Name 				:= Ship - Lose Supply
Is Negative	When	:= amount > 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Vehicles import Ship;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Ship]()
Parameter			:= VehicleName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.SupplyRemaining -= amount;

Name 				:= Ship - Cargo Damage
Is Negative	When	:= amount > 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Interfaces import ICargoContainer;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[ICargoContainer]()
Parameter			:= VehicleName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Cargo.TakeDamage("Skips All Shields", amount);

Name 				:= Ship - Moved
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Vehicles import SpaceVehicle;
Import				:= from FrEee.Game.Interfaces import IUnit;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[SpaceVehicle]().Except[IVehicle](Galaxy.Current.FindSpaceObjects[IUnit]())
Parameter			:= VehicleName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Sector = Galaxy.Current.PickRandomSector();

Name 				:= Planet - Conditions Change
Is Negative	When	:= amount < 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Import				:= from FrEee.Game.Interfaces import IUnit;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]()
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= # planets don't have conditions yet so do nothing

Name 				:= Planet - Value Change
Is Negative	When	:= amount < 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Import				:= from FrEee.Game.Interfaces import IUnit;
Import              := from FrEee.Utility import Resource;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]()
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Value[Resource.Minerals] += amount;
Action				:= target.Value[Resource.Organics] += amount; 
Action				:= target.Value[Resource.Radioactives] += amount; 

Name 				:= Planet - Population Change
Is Negative	When	:= amount < 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]().Where(lambda p: p.Colony != None)
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Colony.ChangePopulation(amount); 

Name 				:= Planet - Population Rebel
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]().Where(lambda p: p.Colony != None)
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= from FrEee.Game.Objects.Space import Galaxy;
Action				:= target.Colony = source if source != None else Galaxy.Current.CreateNewEmpire();

Name 				:= Planet - Facility Damage
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]().Where(lambda p: p.Colony != None)
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Colony.Facilities.PickRandom().Dispose() for num in range(0, amount);

Name 				:= Planet - Cargo Damage
Is Negative	When	:= amount > 0
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]().Where(lambda p: p.Colony != None)
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Colony.Cargo.TakeDamage("Skips All Shields", amount);

Name 				:= Points - Change
Is Negative	When	:= amount < 0
Import              := from FrEee.Utility import Resource;
Target Selector 	:= Galaxy.Current.Empires
Action				:= target.StoredResources[Resource.Minerals] += amount;
Action				:= target.StoredResources[Resource.Organics] += amount; 
Action				:= target.StoredResources[Resource.Radioactives] += amount;
Action				:= target.NormalizeStoredResources();

Name 				:= Planet - Plague
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]().Where(lambda p: p.Colony != None)
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= # TODO - implement plagues

Name 				:= Planet - Destroyed
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Planet;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Planet]()
Parameter			:= PlanetName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.ConvertToAsteroidField();

Name 				:= Star - Destroyed
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import Star;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[Star]()
Parameter			:= StarName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Detonate();

Name 				:= Warp Point - Closed
Is Negative	When	:= true
Import				:= from FrEee.Game.Objects.Space import Galaxy;
Import				:= from FrEee.Game.Objects.Space import WarpPoint;
Target Selector 	:= Galaxy.Current.FindSpaceObjects[WarpPoint]()
Parameter			:= WarpPointName = target.Name;
Parameter			:= SystemName = target.StarSystem.Name;
Parameter			:= SectorName = target.Sector.Name;
Action				:= target.Close();