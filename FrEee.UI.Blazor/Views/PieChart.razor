@using System.Drawing
@using System.ComponentModel
@using System.Numerics
@using FrEee.Extensions

@typeparam T where T : INumber<T>, IMultiplyOperators<T, int, T>, IDivisionOperators<T, int, T>

@code {
	[Parameter]
	public PieChartViewModel<T> VM { get; set; } = new();

	/// <summary>
	/// When the view model's properties change, update the UI.
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="e"></param>
	private void ViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
	{
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		VM.PropertyChanged += ViewModelPropertyChanged;
	}

	public void Dispose()
	{
		VM.PropertyChanged -= ViewModelPropertyChanged;
	}
}

<div style="
	aspect-ratio: 1;
	max-width: 100%;
	max-height: 100%;
	border-radius: 50%;
	background-image: conic-gradient(@VM.GradientString)"
/>