@using System.Drawing
@using System.ComponentModel

@code {
	[Parameter]
	public ProgressBarViewModel VM { get; set; } = new();

	/// <summary>
	/// When the view model's properties change, update the UI.
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="e"></param>
	private void ViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
	{
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		VM.PropertyChanged += ViewModelPropertyChanged;
	}

	public void Dispose()
	{
		VM.PropertyChanged -= ViewModelPropertyChanged;
	}
}

<div @onclick="VM.OnClick" class="fill" style="display: grid; height: 36px; overflow: hidden">
	<div class="fill" style="display: flex; flex-direction: row; grid-area: 1/1/1/1;">
		<div style="width: @(100 * VM.Value / Math.Max(1, VM.Maximum))%; height: 100%; padding: 0; background-color: #@VM.BarColor.ToRgba()" />
		<div style="width: @(100 * VM.Increment / Math.Max(1, VM.Maximum))%; height: 100%; padding: 0; background-color: #@VM.IncrementColor1.ToRgba()" />
		<div style="width: @(100 * VM.Increment / Math.Max(1, VM.Maximum))%; height: 100%; padding: 0; background-color: #@VM.IncrementColor2.ToRgba()" />
		<div style="width: @(100 * VM.Increment / Math.Max(1, VM.Maximum))%; height: 100%; padding: 0; background-color: #@VM.IncrementColor3.ToRgba()" />
	</div>
	<div class="fill overlay" style="display: flex; flex-direction: row; justify-content: space-between; grid-area: 1/1/1/1; margin: 5px">
		<span style="width: 33%; text-align: left">
			@VM.LeftText
		</span>
		<span style="width: 33%; text-align: center">
			@VM.CenterText
		</span>
		<span style="width: 33%; text-align: right">
			@VM.RightText
		</span>
	</div>
</div>