using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FrEee.Utility;

namespace FrEee.Performance
{
	/// <summary>
	/// Runs code repeatedly to see how fast it is.
	/// </summary>
	public static class GottaGoFast
	{
		/// <summary>
		/// Runs the specified codes.
		/// </summary>
		/// <param name="codes">The codes, keyed by friendly names.</param>
		/// <param name="count">How many time to run each code.</param>
		/// <returns>The times that each code took to run (total).</returns>
		public static SafeDictionary<string, TimeSpan> Run(IDictionary<string, Action> codes, int count = 1000)
		{
			var dict = new SafeDictionary<string, TimeSpan>();
			for (int i = 0; i < count; i++)
			{
				foreach (var code in codes)
				{
					var start = DateTime.Now;
					code.Value();
					var end = DateTime.Now;
					dict[code.Key] += end - start;
				}
			}
			return dict;
		}

		/// <summary>
		/// Creates a performance report.
		/// </summary>
		/// <param name="data">The data generated by <see cref="Run"/>.</param>
		/// <returns>The report.</returns>
		public static string CreateReport(IDictionary<string, TimeSpan> data)
		{
			int rank = 1;
			var sb = new StringBuilder();
			TimeSpan? best = null;
			foreach (var entry in data.OrderBy(x => x.Value))
			{
				if (best == null)
				{
					sb.AppendLine($"#{rank}: {entry.Key} at {entry.Value} (best!)");
					best = entry.Value;
				}
				else
				{
					sb.AppendLine($"#{rank}: {entry.Key} at {entry.Value} ({Math.Round(entry.Value.TotalMilliseconds / best.Value.TotalMilliseconds, 2)}x of best)");
				}
				rank++;
			}
			return sb.ToString();
		}
	}
}
